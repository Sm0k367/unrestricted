name: Deploy Epic Tech AI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: epic_tech_ai_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: package-lock.json # Assuming package-lock.json is at root

    - name: Install dependencies
      run: npm ci --legacy-peer-deps

    - name: Setup test database
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/epic_tech_ai_test
      run: |
        npx prisma generate
        npx prisma db push

    - name: Run type checking
      run: npm run type-check

    - name: Run linting
      run: npm run lint

    - name: Run tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/epic_tech_ai_test
        NEXTAUTH_SECRET: test-secret
        NEXTAUTH_URL: http://localhost:3000
      run: npm test # Add your test script here

    - name: Build application
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/epic_tech_ai_test
        NEXTAUTH_SECRET: test-secret
        NEXTAUTH_URL: http://localhost:3000
        NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY: pk_test_dummy
      run: npm run build

  deploy-preview:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: package-lock.json

    - name: Install Vercel CLI
      run: npm install --global vercel@latest

    - name: Pull Vercel Environment Information
      run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

    - name: Build Project Artifacts
      run: vercel build --token=${{ secrets.VERCEL_TOKEN }}

    - name: Deploy Project Artifacts to Vercel
      run: |
        url="$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})"
        echo "PREVIEW_URL=$url" >> $GITHUB_ENV

    - name: Comment PR with preview URL
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `ðŸš€ Preview deployment ready!\n\n**Preview URL:** ${process.env.PREVIEW_URL}\n\n*Deployed from commit ${context.sha}*`
          })

  deploy-production:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: package-lock.json

    - name: Install Vercel CLI
      run: npm install --global vercel@latest

    - name: Pull Vercel Environment Information
      run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

    - name: Build Project Artifacts
      run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}

    - name: Deploy Project Artifacts to Vercel
      run: |
        url="$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }})"
        echo "PRODUCTION_URL=$url" >> $GITHUB_ENV

    - name: Run database migrations
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
      run: |
        npx prisma generate
        npx prisma db push

    - name: Notify deployment success
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.repos.createCommitStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            sha: context.sha,
            state: 'success',
            target_url: process.env.PRODUCTION_URL,
            description: 'Production deployment successful',
            context: 'vercel/deployment'
          })

  security-scan:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run security audit
      run: npm audit --audit-level moderate

    - name: Run dependency check
      uses: actions/dependency-review-action@v4
      with:
        fail-on-severity: moderate

  lighthouse:
    needs: deploy-preview
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Wait for deployment
      run: sleep 30

    - name: Run Lighthouse CI
      uses: treosh/lighthouse-ci-action@v10
      with:
        urls: |
          ${{ env.PREVIEW_URL }}
          ${{ env.PREVIEW_URL }}/dashboard
        configPath: './lighthouserc.json' # Assuming lighthouserc.json is at root
        uploadArtifacts: true
        temporaryPublicStorage: true
