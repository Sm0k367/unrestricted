// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Management
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  image         String?
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Authentication
  accounts Account[]
  sessions Session[]

  // Subscription & Billing
  subscription   Subscription?
  stripeCustomerId String? @unique
  
  // Usage & Analytics
  generations    Generation[]
  usageStats     UsageStats[]
  
  // Team & Collaboration
  teamMemberships TeamMember[]
  ownedTeams      Team[]       @relation("TeamOwner")
  
  // API Access
  apiKeys        ApiKey[]
  
  // Content & Projects
  projects       Project[]
  templates      Template[]
  
  @@map("users")
}

// NextAuth.js Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Subscription & Billing
model Subscription {
  id                String            @id @default(cuid())
  userId            String            @unique
  stripeSubscriptionId String?        @unique
  stripePriceId     String?
  status            SubscriptionStatus
  plan              SubscriptionPlan
  currentPeriodStart DateTime?
  currentPeriodEnd   DateTime?
  cancelAtPeriodEnd  Boolean          @default(false)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  INCOMPLETE
  INCOMPLETE_EXPIRED
  PAST_DUE
  TRIALING
  UNPAID
}

enum SubscriptionPlan {
  CREATOR
  PRO
  TEAM
  ENTERPRISE
}

// Content Generation
model Generation {
  id          String         @id @default(cuid())
  userId      String
  type        GenerationType
  prompt      String         @db.Text
  result      String?        @db.Text
  metadata    Json?
  status      GenerationStatus
  model       String?
  tokens      Int?
  cost        Float?
  projectId   String?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  project Project? @relation(fields: [projectId], references: [id])

  @@map("generations")
}

enum GenerationType {
  TEXT
  IMAGE
  CODE
  AUDIO
  VIDEO
}

enum GenerationStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

// Usage Tracking & Analytics
model UsageStats {
  id              String   @id @default(cuid())
  userId          String
  date            DateTime @db.Date
  textGenerations Int      @default(0)
  imageGenerations Int     @default(0)
  codeGenerations Int      @default(0)
  audioGenerations Int     @default(0)
  videoGenerations Int     @default(0)
  totalTokens     Int      @default(0)
  totalCost       Float    @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date])
  @@map("usage_stats")
}

// Team & Collaboration
model Team {
  id          String   @id @default(cuid())
  name        String
  description String?
  ownerId     String
  settings    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  owner   User         @relation("TeamOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  members TeamMember[]
  projects Project[]

  @@map("teams")
}

model TeamMember {
  id     String   @id @default(cuid())
  teamId String
  userId String
  role   TeamRole
  joinedAt DateTime @default(now())

  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([teamId, userId])
  @@map("team_members")
}

enum TeamRole {
  OWNER
  ADMIN
  MEMBER
  VIEWER
}

// Projects & Organization
model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  userId      String
  teamId      String?
  settings    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  team        Team?        @relation(fields: [teamId], references: [id])
  generations Generation[]

  @@map("projects")
}

// Templates & Workflows
model Template {
  id          String       @id @default(cuid())
  name        String
  description String?
  type        GenerationType
  prompt      String       @db.Text
  settings    Json?
  isPublic    Boolean      @default(false)
  userId      String
  tags        String[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("templates")
}

// API Management
model ApiKey {
  id          String    @id @default(cuid())
  name        String
  key         String    @unique
  userId      String
  permissions Json?
  lastUsed    DateTime?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("api_keys")
}

// Webhooks
model Webhook {
  id          String      @id @default(cuid())
  url         String
  events      String[]
  secret      String?
  isActive    Boolean     @default(true)
  lastTriggered DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@map("webhooks")
}

// System & Configuration
model SystemConfig {
  id    String @id @default(cuid())
  key   String @unique
  value Json
  updatedAt DateTime @updatedAt

  @@map("system_config")
}

// Audit Logs
model AuditLog {
  id        String   @id @default(cuid())
  userId    String?
  action    String
  resource  String?
  metadata  Json?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())

  @@map("audit_logs")
}
